var emodule=function(t){"use strict";function s(t){var s=Object.create(null);return t&&Object.keys(t).forEach(function(e){if("default"!==e){var a=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(s,e,a.get?a:{enumerable:!0,get:function(){return t[e]}})}}),s.default=t,Object.freeze(s)}var e=s(t);const a=[{lat:48.450203,lng:85.779506},{lat:48.196905,lng:85.484964},{lat:47.118502,lng:85.489791},{lat:47.051568,lng:83.874497},{lat:47.291454,lng:82.995577},{lat:45.614305,lng:82.145471},{lat:45.248283,lng:82.504298},{lat:45.465301,lng:81.854461},{lat:45.028273,lng:79.749485},{lat:43.250186,lng:80.666645},{lat:42.920257,lng:80.146637},{lat:42.122486,lng:80.089135},{lat:41.478927,lng:78.230156},{lat:41.125925,lng:77.70275},{lat:41.149542,lng:76.826364},{lat:40.477242,lng:76.470331},{lat:40.366876,lng:75.782885},{lat:40.747633,lng:75.637102},{lat:40.554106,lng:74.840279},{lat:40.137634,lng:73.870804},{lat:39.556288,lng:73.750286},{lat:39.500496,lng:73.350206},{lat:38.511124,lng:73.74586},{lat:38.464105,lng:74.698112},{lat:37.385111,lng:74.914031},{lat:37.344806,lng:74.418208},{lat:37.029986,lng:74.378385},{lat:36.646667,lng:75.736854},{lat:36.022157,lng:75.779226},{lat:35.399525,lng:77.248964},{lat:35.387481,lng:77.864858},{lat:32.793943,lng:79.00728},{lat:32.691787,lng:78.186076},{lat:31.029463,lng:78.827991},{lat:29.914897,lng:81.237128},{lat:30.30827,lng:81.528831},{lat:27.919926,lng:85.789773},{lat:27.695771,lng:87.299969},{lat:27.975023,lng:88.725285},{lat:27.371729,lng:88.673764},{lat:27.104419,lng:89.08026},{lat:28.11168,lng:89.671715},{lat:27.747947,lng:91.364162},{lat:26.813117,lng:92.046289},{lat:26.913633,lng:93.74285},{lat:28.11852,lng:95.871935},{lat:27.661535,lng:97.06375},{lat:28.127458,lng:98.008955},{lat:26.205632,lng:98.551991},{lat:24.690439,lng:97.372098},{lat:23.742346,lng:97.544862},{lat:24.040013,lng:98.537267},{lat:22.099233,lng:99.117237},{lat:21.971814,lng:99.896468},{lat:21.510738,lng:99.972002},{lat:21.343015,lng:100.540488},{lat:21.687813,lng:101.040349},{lat:21.170124,lng:101.194254},{lat:21.13175,lng:101.857792},{lat:21.840658,lng:101.814364},{lat:21.973453,lng:101.666887},{lat:22.392019,lng:101.700064},{lat:22.362935,lng:102.198458},{lat:22.720893,lng:102.489763},{lat:22.411966,lng:103.081813},{lat:22.773836,lng:103.344971},{lat:22.574143,lng:103.530313},{lat:22.791159,lng:103.6438},{lat:22.505199,lng:103.941914},{lat:22.506605,lng:104.010065},{lat:22.721504,lng:104.053004},{lat:22.823848,lng:104.252844},{lat:22.743761,lng:104.246474},{lat:22.668125,lng:104.375574},{lat:22.817177,lng:104.547557},{lat:22.808577,lng:104.730215},{lat:22.927311,lng:104.878599},{lat:23.100528,lng:104.824939},{lat:23.256604,lng:105.239989},{lat:23.357486,lng:105.328007},{lat:23.078377,lng:105.537416},{lat:22.908357,lng:105.850551},{lat:22.955018,lng:106.197311},{lat:22.866414,lng:106.237257},{lat:22.794224,lng:106.784385},{lat:22.606187,lng:106.696641},{lat:22.625312,lng:106.590684},{lat:22.358103,lng:106.54564},{lat:22.317184,lng:106.59183},{lat:21.981753,lng:106.65266},{lat:21.819269,lng:106.98995},{lat:21.595217,lng:107.343718},{lat:21.590711,lng:107.469554},{lat:21.559744,lng:107.926214},{lat:21.352116,lng:108.098069},{lat:18.848867,lng:106.365221},{lat:16.639856,lng:109.001483},{lat:12.354209,lng:110.144143},{lat:6.898159,lng:107.693078},{lat:2.411098,lng:109.712197},{lat:3.608205,lng:112.685627},{lat:6.917141,lng:115.65903},{lat:11.621863,lng:119.117695},{lat:17.427307,lng:119.181631},{lat:21.559136,lng:121.944652},{lat:24.692908,lng:122.813551},{lat:25.804961,lng:125.605796},{lat:28.902045,lng:123.868392},{lat:39.90736,lng:124.360414},{lat:40.066205,lng:124.3809},{lat:40.439782,lng:124.890951},{lat:40.45972,lng:125.068013},{lat:40.527594,lng:125.065451},{lat:40.869317,lng:126.010098},{lat:41.33995,lng:126.476201},{lat:41.60523,lng:126.617014},{lat:41.766003,lng:126.931591},{lat:41.510138,lng:127.077456},{lat:41.320014,lng:128.102703},{lat:41.486041,lng:128.404762},{lat:41.997492,lng:128.094529},{lat:42.001111,lng:128.933119},{lat:42.116075,lng:129.178446},{lat:42.372408,lng:129.29815},{lat:42.431228,lng:129.437197},{lat:42.353695,lng:129.547389},{lat:42.420265,lng:129.610984},{lat:42.424085,lng:129.702434},{lat:42.462124,lng:129.747722},{lat:42.576265,lng:129.747706},{lat:42.598597,lng:129.784763},{lat:42.705073,lng:129.78115},{lat:42.916487,lng:129.87516},{lat:42.95932,lng:129.870308},{lat:42.967079,lng:130.082224},{lat:42.902427,lng:130.103318},{lat:42.888846,lng:130.246131},{lat:42.69931,lng:130.183364},{lat:42.397308,lng:130.650496},{lat:42.737426,lng:130.603166},{lat:42.839518,lng:131.143634},{lat:43.366525,lng:131.360013},{lat:44.028043,lng:131.35622},{lat:44.836955,lng:131.088684},{lat:44.964281,lng:131.539184},{lat:45.262532,lng:131.873955},{lat:44.975256,lng:133.017162},{lat:46.053746,lng:133.755692},{lat:46.140663,lng:133.72556},{lat:46.240843,lng:133.93668},{lat:46.988564,lng:134.084767},{lat:47.106612,lng:134.248747},{lat:47.31182,lng:134.190123},{lat:47.453882,lng:134.551237},{lat:47.730982,lng:134.806545},{lat:48.012002,lng:134.580478},{lat:48.109307,lng:134.684949},{lat:48.26088,lng:134.691984},{lat:48.397305,lng:135.138638},{lat:48.487535,lng:135.12153},{lat:48.402161,lng:134.23148},{lat:48.148786,lng:133.131845},{lat:47.989237,lng:132.660165},{lat:47.775175,lng:132.543443},{lat:47.733535,lng:131.125889},{lat:48.862439,lng:130.735731},{lat:49.404189,lng:129.639086},{lat:49.600085,lng:128.819985},{lat:49.616134,lng:127.947989},{lat:52.797943,lng:126.261345},{lat:53.605774,lng:123.92994},{lat:53.509858,lng:120.972201},{lat:52.591649,lng:119.752004},{lat:52.530967,lng:120.579839},{lat:52.031972,lng:120.513135},{lat:51.782882,lng:119.872711},{lat:50.182899,lng:118.945525},{lat:49.556974,lng:117.80773},{lat:49.894417,lng:116.71725},{lat:47.646,lng:115.095524},{lat:47.609054,lng:119.048075},{lat:46.796656,lng:119.861435},{lat:46.79858,lng:116.81335},{lat:45.751738,lng:116.055292},{lat:45.493109,lng:114.690026},{lat:44.785075,lng:113.603211},{lat:45.096691,lng:111.810423},{lat:44.369551,lng:111.291066},{lat:43.732257,lng:111.872232},{lat:42.579933,lng:109.400016},{lat:42.526246,lng:107.388334},{lat:41.803058,lng:105.177347},{lat:42.738446,lng:101.194736},{lat:42.833595,lng:96.513761},{lat:44.331662,lng:95.53591},{lat:44.297478,lng:95.029834},{lat:44.985916,lng:93.633238},{lat:45.260259,lng:91.004807},{lat:45.493364,lng:90.756695},{lat:45.979527,lng:91.062312},{lat:46.631254,lng:91.146309},{lat:47.901679,lng:90.29278},{lat:47.930065,lng:89.706102},{lat:48.031383,lng:89.647632},{lat:48.20611,lng:88.687193},{lat:48.361037,lng:88.66978},{lat:48.591853,lng:88.014352},{lat:48.701138,lng:88.13692},{lat:49.195897,lng:87.840332},{lat:49.150227,lng:86.886047},{lat:48.995127,lng:86.71887},{lat:48.925105,lng:86.729035},{lat:48.840935,lng:86.804793},{lat:48.805172,lng:86.752248},{lat:48.726764,lng:86.765929},{lat:48.513322,lng:86.478271},{lat:48.450203,lng:85.779506}];function i(t,s){const{lat:e,lng:a}=t;let i=!1;for(let t=0,l=s.length-1;t<s.length;l=t++){const o=s[t].lat,n=s[t].lng,r=s[l].lat,c=s[l].lng;n>a!=c>a&&e<(r-o)*(a-n)/(c-n)+o&&(i=!i)}return i}class l extends e.control.AbstractControl{get filename(){return"/code.js"}constructor(){super(...arguments),this.emtis={mapClick:null,init:null,markerClick:null,markerDrag:null,markerDragend:null,markerUpdate:null,overlayClick:null,lineClick:null,lineDrag:null,ineDragend:null,lineUpdate:null,lineInsert:null,lineRemove:null,polygonClick:null,polygonDrag:null,polygonDragend:null,polygonUpdate:null,polygonInsert:null,polygonRemove:null,"update:zoom":null,"update:lat":null,"update:lng":null,"update:markers":null,"update:lines":null,"update:polygon":null,"update:polygons":null},this.props={disabled:!1,factory:"google",akey:"",css:"",tdurlcn:void 0,tdurlintl:void 0,lat:31.223704,lng:121.366077,zoom:10,zoomControl:!1,markers:{},lines:{},polygons:{},overlays:{}},this.needReUpdateMarkers=!1,this.access={lib:void 0,map:void 0,overlay:void 0,markerImg:"",zoom:void 0,vectorLayer:void 0,iframe:void 0,iwindow:void 0,markers:{},lines:{},polygons:{},overlays:{}},this.notInit=!1,this.isLoading=!1,this.zoomData=10,this.latData=0,this.lngData=0,this.selectedObject={type:"line",key:"",index:0},this.localeData={en:{"remove node":"Remove node"},sc:{"remove node":"移除节点"},tc:{"remove node":"移除節點"},ja:{"remove node":"ノードを削除"},ko:{"remove node":"노드 제거"},th:{"remove node":"ลบโหนด"},es:{"remove node":"Eliminar nodo"},de:{"remove node":"Knoten entfernen"},fr:{"remove node":"Supprimer le nœud"},pt:{"remove node":"Remover nó"},ru:{"remove node":"Удалить узел"},vi:{"remove node":"Xóa nút"}}}get showMask(){return!!this.isLoading||e.dom.is.move}iframeLoad(t){if(this.access.iframe=t.currentTarget,!this.access.iframe.contentWindow)return;this.access.iwindow=this.access.iframe.contentWindow;const s=this.access.iwindow.document;s.body.style.margin="0",s.body.style.overflow="hidden";const l=s.createElement("style");l.textContent='body,html{font-size:12px;line-height:1;font-family:"Lucida Sans Unicode","Helvetica Neue","Helvetica","PingFang SC","Hiragino Sans GB","Noto Sans CJK SC","Noto Sans CJK","Source Han Sans","WenQuanYi Micro Hei","Microsoft YaHei",sans-serif;}'+this.props.css,s.head.append(l);const o=s.createElement("div");o.id="map",o.style.height="100%";const n=async t=>{e.dom.hasTouchButMouse(t)||(await e.form.changeFocus(this.formId),e.form.hidePop())};switch(o.addEventListener("mousedown",t=>{n(t).catch(()=>{})}),o.addEventListener("touchstart",t=>{n(t).catch(()=>{})},{passive:!0}),s.body.append(o),this.props.factory){case"google":{const t=s.createElement("script");t.textContent=`(g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({\n                    key: "${this.props.akey}",\n                    v: "weekly"\n                });`,s.head.append(t),this.access.iwindow.initMap=async()=>{await this.access.iwindow.google.maps.importLibrary("maps"),this.access.lib=this.access.iwindow.google.maps;const t=this.props,e=this.access;class a extends this.access.lib.OverlayView{constructor(s){super(),this._key=s.key,this._position=new e.lib.LatLng(t.overlays[s.key].lat,t.overlays[s.key].lng),this.setMap(s.map)}onAdd(){const e=this.getPanes(),a=s.createElement("div");a.innerHTML=t.overlays[this._key].html,this._el=a.firstChild,e.overlayLayer.appendChild(this._el)}draw(){if(!this._el)return;const t=this.getProjection().fromLatLngToDivPixel(this._position);this._el.style.left=t.x+"px",this._el.style.top=t.y+"px"}onRemove(){this._el&&(this._el.parentNode.removeChild(this._el),delete this._el)}setPosition(){if(!this._el)return;this._position=new e.lib.LatLng(t.overlays[this._key].lat,t.overlays[this._key].lng);const s=this.getProjection().fromLatLngToDivPixel(this._position);this._el.style.left=s.x+"px",this._el.style.top=s.y+"px"}refreshHTML(){if(!this._el)return;this._el.parentNode.removeChild(this._el);const e=this.getPanes(),a=s.createElement("div");a.innerHTML=t.overlays[this._key].html,this._el=a.firstChild,e.overlayLayer.appendChild(this._el)}}this.access.overlay=a,this.access.map=new this.access.lib.Map(s.getElementById("map"),{center:{lat:this.propNumber("lat"),lng:this.propNumber("lng")},zoom:this.propNumber("zoom"),zoomControl:this.propBoolean("zoomControl"),mapTypeControl:!1,streetViewControl:!1,fullscreenControl:!1,gestureHandling:"greedy"}),this.latData=this.propNumber("lat"),this.lngData=this.propNumber("lng"),this.zoomData=this.propNumber("zoom"),this.access.map.addListener("click",t=>{this.emit("mapClick",{lat:t.latLng.lat(),lng:t.latLng.lng()})}),this.access.map.addListener("zoom_changed",()=>{this.zoomData=this.access.map.getZoom(),this.emit("update:zoom",this.access.map.getZoom())}),this.access.map.addListener("center_changed",()=>{const t=this.access.map.getCenter(),s=t.lat(),e=t.lng();s!==this.latData&&(this.latData=s,this.emit("update:lat",s)),e!==this.lngData&&(this.lngData=e,this.emit("update:lng",e))}),this.updateMarkers(),this.updateLines(),this.updatePolygons(),this.updateOverlays(),this.isLoading=!1,this.emit("init",{lib:this.access.lib,map:this.access.map})},this.access.iwindow.initMap();break}case"tianditu":{const t=s.createElement("script");t.src=`${e.getCdn()}/npm/maptalks@1.0.0-rc.24/dist/maptalks.min.js`,t.addEventListener("load",()=>{this.access.lib=this.access.iwindow.maptalks;const t='&copy;<a target="_blank" href="https://www.tianditu.gov.cn">天地图</a> - GS(2023)336号 - 甲测资字1100471',s='&copy;<a target="_blank" href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, &copy;<a target="_blank" href="https://carto.com">CARTO</a>',e=new this.access.lib.TileLayer("base",{urlTemplate:(t,s,e,l)=>{if(this.zoomData<10.5)return this.props.tdurlcn?this.props.tdurlcn.replace(/{x}/g,t.toString()).replace(/{y}/g,t.toString()).replace(/{z}/g,t.toString()):`https://t${l}.tianditu.gov.cn/vec_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=vec&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX=${e}&TILEROW=${s}&TILECOL=${t}&tk=${this.props.akey}`;const o=t/Math.pow(2,e)*360-180,n=180*Math.atan(Math.sinh(Math.PI*(1-2*s/Math.pow(2,e))))/Math.PI,r=(t+1)/Math.pow(2,e)*360-180;return i({lat:(n+180*Math.atan(Math.sinh(Math.PI*(1-2*(s+1)/Math.pow(2,e))))/Math.PI)/2,lng:(o+r)/2},a)?this.props.tdurlcn?this.props.tdurlcn.replace(/{x}/g,t.toString()).replace(/{y}/g,t.toString()).replace(/{z}/g,t.toString()).replace(/{s}/g,t.toString()):`https://t${l}.tianditu.gov.cn/vec_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=vec&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX=${e}&TILEROW=${s}&TILECOL=${t}&tk=${this.props.akey}`:this.props.tdurlintl?this.props.tdurlintl.replace(/{x}/g,t.toString()).replace(/{y}/g,t.toString()).replace(/{z}/g,t.toString()).replace(/{s}/g,t.toString()):`https://basemaps.cartocdn.com/rastertiles/voyager/${e}/${t}/${s}@2x.png`},subdomains:["0","1","2","3","4","5","6","7"],attribution:t});let l="cn";const o=new this.access.lib.TileLayer("boudaries",{urlTemplate:this.props.tdurlcn??"https://t{s}.tianditu.gov.cn/cva_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=cva&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk="+this.props.akey,subdomains:["0","1","2","3","4","5","6","7"]});this.access.map=new this.access.lib.Map("map",{center:[this.propNumber("lng"),this.propNumber("lat")],zoom:this.propNumber("zoom"),zoomControl:this.propBoolean("zoomControl"),maxZoom:18,panAnimation:!1,seamlessZoom:!1,spatialReference:{projection:"EPSG:3857"},baseLayer:e,layers:[o]}),this.latData=this.propNumber("lat"),this.lngData=this.propNumber("lng"),this.zoomData=this.propNumber("zoom"),this.propBoolean("zoomControl")&&(this.access.zoom=new this.access.lib.control.Zoom({position:"bottom-right",zoomLevel:!1}),this.access.map.addControl(this.access.zoom)),this.access.vectorLayer=new this.access.lib.VectorLayer("vector"),this.access.vectorLayer.addTo(this.access.map);const n=(n,r)=>{if(this.zoomData>=10.5)if(i({lat:r,lng:n},a)){if("cn"===l)return;l="cn",e.setOptions({attribution:t}),this.access.map.addLayer(o)}else{if("intl"===l)return;l="intl",e.setOptions({attribution:s}),this.access.map.removeLayer(o)}else{if("cn"===l)return;l="cn",e.setOptions({attribution:t}),this.access.map.addLayer(o)}};this.access.map.on("click",t=>{this.access.map.identify({coordinate:t.coordinate,layers:[this.access.vectorLayer],includeInternals:!0,includeInvisible:!0},s=>{s.length>0||this.emit("mapClick",{lat:t.coordinate.y,lng:t.coordinate.x})})}),this.access.map.on("zooming",t=>{this.zoomData=t.to,this.emit("update:zoom",t.to);const s=this.access.map.getCenter();s.y!==this.latData&&(this.latData=s.y,this.emit("update:lat",s.y)),s.x!==this.lngData&&(this.lngData=s.x,this.emit("update:lng",s.x)),n(s.x,s.y)}),this.access.map.on("moving",()=>{const t=this.access.map.getCenter();t.y!==this.propNumber("lat")&&this.emit("update:lat",t.y),t.x!==this.propNumber("lng")&&this.emit("update:lng",t.x),n(t.x,t.y)}),this.updateMarkers(),this.updateLines(),this.updatePolygons(),this.updateOverlays(),this.isLoading=!1,this.emit("init",{lib:this.access.lib,map:this.access.map})}),s.head.append(t);const l=s.createElement("link");l.rel="stylesheet",l.href=`${e.getCdn()}/npm/maptalks@1.0.0-rc.24/dist/maptalks.min.css`,s.head.append(l);break}}}load(){if(this.access.map&&(this.access.map=void 0),this.access.overlay=void 0,this.access.zoom=void 0,this.access.vectorLayer=void 0,this.access.iwindow=void 0,this.access.markers={},this.access.lines={},this.access.polygons={},this.access.overlays={},""===this.props.akey)return this.notInit||(this.notInit=!0),void(this.isLoading&&(this.isLoading=!1));if(this.notInit)this.notInit=!1;else{if(!this.access.iframe?.contentWindow)return;this.access.iframe.contentWindow.location.reload()}this.isLoading=!0}updateMarkers(){switch(this.props.factory){case"google":for(const t in this.props.markers){const s=this.props.markers[t];if(!this.access.markers[t]){const e=new this.access.lib.Marker({position:new this.access.lib.LatLng(s.lat,s.lng),title:s.title,draggable:s.drag??!1,map:this.access.map});e.addListener("click",()=>{this.emit("markerClick",t)}),e.addListener("drag",()=>{this.emit("markerDrag",t)}),e.addListener("dragend",()=>{this.emit("markerDragend",t)}),e.addListener("position_changed",()=>{const s=e.getPosition(),a=s.lat(),i=s.lng();this.access.markers[t].lat=a,this.access.markers[t].lng=i,this.props.markers[t].lat=a,this.props.markers[t].lng=i,this.emit("update:markers",this.props.markers),this.emit("markerUpdate",t)}),this.access.markers[t]={lat:s.lat,lng:s.lng,title:s.title,drag:s.drag??!1,obj:e};continue}this.access.markers[t].lat===s.lat&&this.access.markers[t].lng===s.lng||(this.access.markers[t].lat=s.lat,this.access.markers[t].lng=s.lng,this.access.markers[t].obj.setPosition(new this.access.lib.LatLng(s.lat,s.lng)));const e=s.title;this.access.markers[t].title!==e&&(this.access.markers[t].title=e,this.access.markers[t].obj.setTitle(e));const a=s.drag??!1;this.access.markers[t].drag!==a&&(this.access.markers[t].drag=a,this.access.markers[t].obj.setDraggable(a))}break;case"tianditu":if(!this.access.markerImg)return void(this.needReUpdateMarkers=!0);for(const t in this.props.markers){const s=this.props.markers[t];if(!this.access.markers[t]){const e=new this.access.lib.Marker([s.lng,s.lat],{draggable:s.drag??!1,symbol:{markerFile:this.access.markerImg,markerWidth:36,markerHeight:36,textName:s.title,textHaloRadius:1,textDy:-46}});this.access.vectorLayer.addGeometry(e),e.on("click",()=>{this.emit("markerClick",t)}),e.on("dragging",()=>{this.emit("markerDrag",t)}),e.on("dragend",()=>{this.emit("markerDragend",t)}),e.on("positionchange",()=>{const s=e.getCoordinates(),a=Math.round(1e6*s.y)/1e6,i=Math.round(1e6*s.x)/1e6;this.access.markers[t].lat=a,this.access.markers[t].lng=i,this.props.markers[t].lat=a,this.props.markers[t].lng=i,this.emit("update:markers",this.props.markers),this.emit("markerUpdate",t)}),this.access.markers[t]={lat:s.lat,lng:s.lng,title:s.title,drag:s.drag??!1,obj:e};continue}this.access.markers[t].lat===s.lat&&this.access.markers[t].lng===s.lng||(this.access.markers[t].lat=s.lat,this.access.markers[t].lng=s.lng,this.access.markers[t].obj.setCoordinates([s.lng,s.lat]));const e=s.title;this.access.markers[t].title!==e&&(this.access.markers[t].title=e,this.access.markers[t].obj.updateSymbol({textName:s.title}));const a=s.drag??!1;this.access.markers[t].drag!==a&&(this.access.markers[t].drag=a,this.access.markers[t].obj.config("draggable",a))}}this.removeNoex(this.props.markers,this.access.markers)}updateOverlays(){switch(this.props.factory){case"google":for(const t in this.props.overlays){const s=this.props.overlays[t];if(!this.access.overlays[t]){const e=new this.access.overlay({map:this.access.map,key:t});e.addListener("click",()=>{this.emit("overlayClick",t)}),this.access.overlays[t]={lat:s.lat,lng:s.lng,html:s.html,obj:e};continue}this.access.overlays[t].lat===s.lat&&this.access.overlays[t].lng===s.lng||(this.access.overlays[t].lat=s.lat,this.access.overlays[t].lng=s.lng,this.access.overlays[t].obj.setPosition(new this.access.lib.LatLng(s.lat,s.lng))),this.access.overlays[t].html!==s.html&&(this.access.overlays[t].html=s.html,this.access.overlays[t].obj.refreshHTML())}break;case"tianditu":for(const t in this.props.overlays){const s=this.props.overlays[t];if(!this.access.overlays[t]){const e=new this.access.lib.ui.UIMarker([s.lng,s.lat],{content:s.html});e.addTo(this.access.map),e.on("click",()=>{this.emit("overlayClick",t)}),this.access.overlays[t]={lat:s.lat,lng:s.lng,html:s.html,obj:e};continue}this.access.overlays[t].lat===s.lat&&this.access.overlays[t].lng===s.lng||(this.access.overlays[t].lat=s.lat,this.access.overlays[t].lng=s.lng,this.access.overlays[t].obj.setCoordinates(new this.access.lib.Coordinate(s.lng,s.lat))),this.access.overlays[t].html!==s.html&&(this.access.overlays[t].html=s.html,this.access.overlays[t].obj.setContent(s.html))}}this.removeNoex(this.props.markers,this.access.markers)}updateLines(){switch(this.props.factory){case"google":for(const t in this.props.lines){const s=this.props.lines[t];if(!this.access.lines[t]){const a=new this.access.lib.Polyline({path:s.path,strokeColor:s.strokeColor,strokeOpacity:s.strokeOpacity,strokeWeight:s.strokeWeight,draggable:s.drag??!1,editable:s.edit??!1,map:this.access.map}),i=a.getPath();this.addLinePathEvent(i,t),a.addListener("click",()=>{this.emit("lineClick",t)}),a.addListener("drag",()=>{this.emit("lineDrag",t)}),a.addListener("dragend",()=>{this.emit("lineDragend",t)}),a.addListener("contextmenu",s=>{if(void 0===s.vertex)return;if(s.domEvent.preventDefault(),e.dom.hasTouchButMouse(s.domEvent))return;this.selectedObject.type="line",this.selectedObject.key=t,this.selectedObject.index=s.vertex;const a=this.element.getBoundingClientRect();e.form.showPop(this.element,this.refs.pop,{x:a.left+s.domEvent.clientX,y:a.top+s.domEvent.clientY})}),a.addListener("mousedown",s=>{"touchstart"===s.domEvent.type&&void 0!==s.vertex&&(this.selectedObject.type="line",this.selectedObject.key=t,this.selectedObject.index=s.vertex,e.dom.bindLong(s.domEvent,()=>{const t=this.element.getBoundingClientRect();e.form.showPop(this.element,this.refs.pop,{x:t.left+s.domEvent.touches[0].clientX,y:t.top+s.domEvent.touches[0].clientY})}))}),this.access.lines[t]={path:JSON.parse(JSON.stringify(s.path)),strokeColor:s.strokeColor,strokeOpacity:s.strokeOpacity,strokeWeight:s.strokeWeight,drag:s.drag??!1,edit:s.edit??!1,obj:a};continue}const a=JSON.stringify(this.access.lines[t].path),i=JSON.stringify(s.path);a!==i&&(this.access.lines[t].path=JSON.parse(i),this.access.lines[t].obj.setPath(s.path),this.addLinePathEvent(this.access.lines[t].obj.getPath(),t)),this.access.lines[t].strokeColor!==s.strokeColor&&(this.access.lines[t].strokeColor=s.strokeColor,this.access.lines[t].obj.setOptions({strokeColor:s.strokeColor})),this.access.lines[t].strokeOpacity!==s.strokeOpacity&&(this.access.lines[t].strokeOpacity=s.strokeOpacity,this.access.lines[t].obj.setOptions({strokeOpacity:s.strokeOpacity})),this.access.lines[t].strokeWeight!==s.strokeWeight&&(this.access.lines[t].strokeWeight=s.strokeWeight,this.access.lines[t].obj.setOptions({strokeWeight:s.strokeWeight}));const l=s.drag??!1;this.access.lines[t].drag!==l&&(this.access.lines[t].drag=l,this.access.lines[t].obj.setDraggable(l));const o=s.edit??!1;this.access.lines[t].edit!==o&&(this.access.lines[t].edit=o,this.access.lines[t].obj.setEditable(o))}break;case"tianditu":for(const t in this.props.lines){const s=this.props.lines[t];if(!this.access.lines[t]){const e=[];for(const t of s.path)e.push([t.lng,t.lat]);const a=new this.access.lib.LineString(e,{symbol:{lineColor:s.strokeColor,lineOpacity:s.strokeOpacity,lineWidth:s.strokeWeight},draggable:s.drag??!1,editable:s.edit??!1});this.access.vectorLayer.addGeometry(a),s.edit&&a.startEdit(),a.on("click",()=>{this.emit("lineClick",t)}),a.on("handledragging",()=>{this.emit("lineDrag",t)}),a.on("dragging",()=>{this.emit("lineDrag",t)}),a.on("handledragend",()=>{this.emit("lineDragend",t)}),a.on("dragend",()=>{this.emit("lineDragend",t)}),a.on("positionchange",()=>{const s=a.getCoordinates(),e=[];for(const t of s)e.push({lat:Math.round(1e6*t.y)/1e6,lng:Math.round(1e6*t.x)/1e6});this.access.lines[t].path=e,this.props.lines[t].path=JSON.parse(JSON.stringify(e)),this.emit("update:lines",this.props.lines),this.emit("lineUpdate",t)}),a.on("shapechange",()=>{const s=[],e=a.getCoordinates();for(const t of e)s.push({lat:Math.round(1e6*t.y)/1e6,lng:Math.round(1e6*t.x)/1e6});if(JSON.stringify(s)!==JSON.stringify(this.access.lines[t].path))if(this.props.lines[t].path=s,this.emit("update:lines",this.props.lines),s.length===this.access.lines[t].path.length)this.access.lines[t].path=JSON.parse(JSON.stringify(s)),this.emit("lineUpdate",t);else{for(let e=0;e<s.length;++e){const a=this.access.lines[t].path[e];if(a.lat!==s[e].lat||a.lng!==s[e].lng)return void(s.length>this.access.lines[t].path.length?(this.access.lines[t].path=JSON.parse(JSON.stringify(s)),this.emit("lineInsert",t,e)):(this.access.lines[t].path=JSON.parse(JSON.stringify(s)),this.emit("lineRemove",t,e,{lat:a.lat,lng:a.lng})))}const e=this.access.lines[t].path.length-1,a=this.access.lines[t].path[e];this.access.lines[t].path=JSON.parse(JSON.stringify(s)),this.emit("lineRemove",t,e,{lat:a.lat,lng:a.lng})}}),this.access.lines[t]={path:JSON.parse(JSON.stringify(s.path)),strokeColor:s.strokeColor,strokeOpacity:s.strokeOpacity,strokeWeight:s.strokeWeight,drag:s.drag??!1,edit:s.edit??!1,obj:a};continue}const e=JSON.stringify(this.access.lines[t].path),a=JSON.stringify(s.path);if(e!==a){this.access.lines[t].path=JSON.parse(a);const e=[];for(const t of s.path)e.push([t.lng,t.lat]);this.access.lines[t].obj.setCoordinates(e)}this.access.lines[t].strokeColor!==s.strokeColor&&(this.access.lines[t].strokeColor=s.strokeColor,this.access.lines[t].obj.updateSymbol({lineColor:s.strokeColor})),this.access.lines[t].strokeOpacity!==s.strokeOpacity&&(this.access.lines[t].strokeOpacity=s.strokeOpacity,this.access.lines[t].obj.updateSymbol({lineOpacity:s.strokeOpacity})),this.access.lines[t].strokeWeight!==s.strokeWeight&&(this.access.lines[t].strokeWeight=s.strokeWeight,this.access.lines[t].obj.updateSymbol({lineWeight:s.strokeWeight}));const i=s.drag??!1;this.access.lines[t].drag!==i&&(this.access.lines[t].drag=i,this.access.lines[t].obj.config("draggable",i));const l=s.edit??!1;this.access.lines[t].edit!==l&&(this.access.lines[t].edit=l,l?this.access.lines[t].obj.startEdit():this.access.lines[t].obj.endEdit(),this.access.lines[t].obj.config("editable",l))}}this.removeNoex(this.props.lines,this.access.lines)}addLinePathEvent(t,s){t.addListener("insert_at",e=>{const a=JSON.parse(JSON.stringify(t.getArray()));this.access.lines[s].path=a,this.props.lines[s].path=JSON.parse(JSON.stringify(a)),this.emit("update:lines",this.props.lines),this.emit("lineInsert",s,e)}),t.addListener("remove_at",(e,a)=>{const i=JSON.parse(JSON.stringify(t.getArray()));this.access.lines[s].path=i,this.props.lines[s].path=JSON.parse(JSON.stringify(i)),this.emit("update:lines",this.props.lines),this.emit("lineRemove",s,e,{lat:a.lat(),lng:a.lng()})}),t.addListener("set_at",()=>{const e=JSON.parse(JSON.stringify(t.getArray()));this.access.lines[s].path=e,this.props.lines[s].path=JSON.parse(JSON.stringify(e)),this.emit("update:lines",this.props.lines),this.emit("lineUpdate",s)})}updatePolygons(){switch(this.props.factory){case"google":for(const t in this.props.polygons){const s=this.props.polygons[t];if(!this.access.polygons[t]){const a=new this.access.lib.Polygon({path:s.path,strokeColor:s.strokeColor,strokeOpacity:s.strokeOpacity,strokeWeight:s.strokeWeight,fillColor:s.fillColor,fillOpacity:s.fillOpacity,draggable:s.drag??!1,editable:s.edit??!1,map:this.access.map}),i=a.getPath();this.addPolygonPathEvent(i,t),a.addListener("click",()=>{this.emit("polygonClick",t)}),a.addListener("drag",()=>{this.emit("polygonDrag",t)}),a.addListener("dragend",()=>{this.emit("polygonDragend",t)}),a.addListener("contextmenu",s=>{if(void 0===s.vertex)return;if(s.domEvent.preventDefault(),e.dom.hasTouchButMouse(s.domEvent))return;this.selectedObject.type="polygon",this.selectedObject.key=t,this.selectedObject.index=s.vertex;const a=this.element.getBoundingClientRect();e.form.showPop(this.element,this.refs.pop,{x:a.left+s.domEvent.clientX,y:a.top+s.domEvent.clientY})}),a.addListener("mousedown",s=>{"touchstart"===s.domEvent.type&&void 0!==s.vertex&&(this.selectedObject.type="polygon",this.selectedObject.key=t,this.selectedObject.index=s.vertex,e.dom.bindLong(s.domEvent,()=>{const t=this.element.getBoundingClientRect();e.form.showPop(this.element,this.refs.pop,{x:t.left+s.domEvent.touches[0].clientX,y:t.top+s.domEvent.touches[0].clientY})}))}),this.access.polygons[t]={path:JSON.parse(JSON.stringify(s.path)),strokeColor:s.strokeColor,strokeOpacity:s.strokeOpacity,strokeWeight:s.strokeWeight,fillColor:s.fillColor,fillOpacity:s.fillOpacity,drag:s.drag??!1,edit:s.edit??!1,obj:a};continue}const a=JSON.stringify(this.access.polygons[t].path),i=JSON.stringify(s.path);a!==i&&(this.access.polygons[t].path=JSON.parse(i),this.access.polygons[t].obj.setPath(s.path),this.addPolygonPathEvent(this.access.polygons[t].obj.getPath(),t)),this.access.polygons[t].strokeColor!==s.strokeColor&&(this.access.polygons[t].strokeColor=s.strokeColor,this.access.polygons[t].obj.setOptions({strokeColor:s.strokeColor})),this.access.polygons[t].strokeOpacity!==s.strokeOpacity&&(this.access.polygons[t].strokeOpacity=s.strokeOpacity,this.access.polygons[t].obj.setOptions({strokeOpacity:s.strokeOpacity})),this.access.polygons[t].strokeWeight!==s.strokeWeight&&(this.access.polygons[t].strokeWeight=s.strokeWeight,this.access.polygons[t].obj.setOptions({strokeWeight:s.strokeWeight})),this.access.polygons[t].fillColor!==s.fillColor&&(this.access.polygons[t].fillColor=s.fillColor,this.access.polygons[t].obj.setOptions({fillColor:s.fillColor})),this.access.polygons[t].fillOpacity!==s.fillOpacity&&(this.access.polygons[t].fillOpacity=s.fillOpacity,this.access.polygons[t].obj.setOptions({fillOpacity:s.fillOpacity}));const l=s.drag??!1;this.access.polygons[t].drag!==l&&(this.access.polygons[t].drag=l,this.access.polygons[t].obj.setDraggable(l));const o=s.edit??!1;this.access.polygons[t].edit!==o&&(this.access.polygons[t].edit=o,this.access.polygons[t].obj.setEditable(o))}break;case"tianditu":for(const t in this.props.polygons){const s=this.props.polygons[t];if(!this.access.polygons[t]){const e=[];for(const t of s.path)e.push([t.lng,t.lat]);const a=new this.access.lib.Polygon(e,{symbol:{lineColor:s.strokeColor,lineOpacity:s.strokeOpacity,lineWidth:s.strokeWeight,polygonFill:s.fillColor,polygonOpacity:s.fillOpacity??.3},draggable:s.drag??!1,editable:s.edit??!1});this.access.vectorLayer.addGeometry(a),s.edit&&a.startEdit(),a.on("click",()=>{this.emit("polygonClick",t)}),a.on("handledragging",()=>{this.emit("polygonDrag",t)}),a.on("dragging",()=>{this.emit("polygonDrag",t)}),a.on("handledragend",()=>{this.emit("polygonDragend",t)}),a.on("dragend",()=>{this.emit("polygonDragend",t)}),a.on("positionchange",()=>{const s=a.getCoordinates(),e=[];for(const t of s[0])e.push({lat:Math.round(1e6*t.y)/1e6,lng:Math.round(1e6*t.x)/1e6});this.access.polygons[t].path=e,this.props.polygons[t].path=JSON.parse(JSON.stringify(e)),this.emit("update:polygon",this.props.polygons),this.emit("polygonUpdate",t)}),a.on("shapechange",()=>{const s=[],e=a.getCoordinates();for(const t of e[0])s.push({lat:Math.round(1e6*t.y)/1e6,lng:Math.round(1e6*t.x)/1e6});if(JSON.stringify(s)!==JSON.stringify(this.access.polygons[t].path))if(this.props.polygons[t].path=s,this.emit("update:polygons",this.props.polygons),s.length===this.access.polygons[t].path.length)this.access.polygons[t].path=JSON.parse(JSON.stringify(s)),this.emit("polygonUpdate",t);else{for(let e=0;e<s.length;++e){const a=this.access.polygons[t].path[e];if(a.lat!==s[e].lat||a.lng!==s[e].lng)return void(s.length>this.access.polygons[t].path.length?(this.access.polygons[t].path=JSON.parse(JSON.stringify(s)),this.emit("polygonInsert",t,e)):(this.access.polygons[t].path=JSON.parse(JSON.stringify(s)),this.emit("polygonRemove",t,e,{lat:a.lat,lng:a.lng})))}const e=this.access.polygons[t].path.length-1,a=this.access.polygons[t].path[e];this.access.polygons[t].path=JSON.parse(JSON.stringify(s)),this.emit("polygonRemove",t,e,{lat:a.lat,lng:a.lng})}}),this.access.polygons[t]={path:JSON.parse(JSON.stringify(s.path)),strokeColor:s.strokeColor,strokeOpacity:s.strokeOpacity,strokeWeight:s.strokeWeight,fillColor:s.fillColor,fillOpacity:s.fillOpacity,drag:s.drag??!1,edit:s.edit??!1,obj:a};continue}const e=JSON.stringify(this.access.polygons[t].path),a=JSON.stringify(s.path);if(e!==a){this.access.polygons[t].path=JSON.parse(a);const e=[];for(const t of s.path)e.push([t.lng,t.lat]);this.access.polygons[t].obj.setCoordinates(e)}this.access.polygons[t].strokeColor!==s.strokeColor&&(this.access.polygons[t].strokeColor=s.strokeColor,this.access.polygons[t].obj.updateSymbol({lineColor:s.strokeColor})),this.access.polygons[t].strokeOpacity!==s.strokeOpacity&&(this.access.polygons[t].strokeOpacity=s.strokeOpacity,this.access.polygons[t].obj.updateSymbol({lineOpacity:s.strokeOpacity})),this.access.polygons[t].strokeWeight!==s.strokeWeight&&(this.access.polygons[t].strokeWeight=s.strokeWeight,this.access.polygons[t].obj.updateSymbol({lineWeight:s.strokeWeight})),this.access.polygons[t].fillColor!==s.fillColor&&(this.access.polygons[t].fillColor=s.fillColor,this.access.polygons[t].obj.updateSymbol({polygonFill:s.fillColor})),this.access.polygons[t].fillOpacity!==s.fillOpacity&&(this.access.polygons[t].fillOpacity=s.fillOpacity,this.access.polygons[t].obj.updateSymbol({polygonOpacity:s.fillOpacity}));const i=s.drag??!1;this.access.polygons[t].drag!==i&&(this.access.polygons[t].drag=i,this.access.polygons[t].obj.config("draggable",i));const l=s.edit??!1;this.access.polygons[t].edit!==l&&(this.access.polygons[t].edit=l,l?this.access.polygons[t].obj.startEdit():this.access.polygons[t].obj.endEdit(),this.access.polygons[t].obj.config("editable",l))}}this.removeNoex(this.props.polygons,this.access.polygons)}addPolygonPathEvent(t,s){t.addListener("insert_at",e=>{const a=JSON.parse(JSON.stringify(t.getArray()));this.access.polygons[s].path=a,this.props.polygons[s].path=JSON.parse(JSON.stringify(a)),this.emit("update:polygons",this.props.polygons),this.emit("polygonInsert",s,e)}),t.addListener("remove_at",(e,a)=>{const i=JSON.parse(JSON.stringify(t.getArray()));this.access.polygons[s].path=i,this.props.polygons[s].path=JSON.parse(JSON.stringify(i)),this.emit("update:polygons",this.props.polygons),this.emit("polygonRemove",s,e,{lat:a.lat(),lng:a.lng()})}),t.addListener("set_at",e=>{const a=JSON.parse(JSON.stringify(t.getArray()));this.access.polygons[s].path=a,this.props.polygons[s].path=JSON.parse(JSON.stringify(a)),this.emit("update:lines",this.props.lines),this.emit("lineUpdate",s,e)})}removeNoex(t,s){switch(this.props.factory){case"google":for(const e in s)t[e]||(s[e].obj.setMap(null),delete s[e]);break;case"tianditu":for(const e in s)t[e]||(this.access.vectorLayer.removeGeometry(s[e].obj),delete s[e])}}removeNode(){switch(this.selectedObject.type){case"line":this.access.lines[this.selectedObject.key].obj.getPath().removeAt(this.selectedObject.index);break;case"polygon":this.access.polygons[this.selectedObject.key].obj.getPath().removeAt(this.selectedObject.index);break}}async onMounted(){this.load(),this.watch("akey",()=>{this.load()}),this.watch("factory",()=>{this.load()}),this.access.markerImg=await e.tool.blob2DataUrl(this.packageFiles["/res/marker.svg"]),this.needReUpdateMarkers&&this.updateMarkers(),this.watch("lat",()=>{if(this.access.map&&this.latData!==this.propNumber("lat"))switch(this.latData=this.propNumber("lat"),this.props.factory){case"google":this.access.map.setCenter({lat:this.latData,lng:this.lngData});break;case"tianditu":this.access.map.setCenter([this.lngData,this.latData])}}),this.watch("lng",()=>{if(this.access.map&&this.lngData!==this.propNumber("lng"))switch(this.lngData=this.propNumber("lng"),this.props.factory){case"google":this.access.map.setCenter({lat:this.latData,lng:this.lngData});break;case"tianditu":this.access.map.setCenter([this.lngData,this.latData])}}),this.watch("zoom",()=>{if(this.access.map)switch(this.zoomData=this.propNumber("zoom"),this.props.factory){case"google":this.access.map.setZoom(this.propNumber("zoom"));break;case"tianditu":this.access.map.setZoom(this.propNumber("zoom"),{animation:!1})}}),this.watch("zoomControl",()=>{if(this.access.map)switch(this.props.factory){case"google":this.access.map.setOptions({zoomControl:this.propBoolean("zoomControl")});break;case"tianditu":this.propBoolean("zoomControl")?(this.access.zoom=new this.access.lib.control.Zoom({position:"bottom-right",zoomLevel:!1}),this.access.map.addControl(this.access.zoom)):this.access.map.removeControl(this.access.zoom)}}),this.watch("markers",()=>{this.access.map&&this.updateMarkers()},{deep:!0}),this.watch("lines",()=>{this.access.map&&this.updateLines()},{deep:!0}),this.watch("polygons",()=>{this.access.map&&this.updatePolygons()},{deep:!0}),this.watch("overlays",()=>{this.access.map&&this.updateOverlays()},{deep:!0})}}return l}(clickgo.modules.clickgo);